name: Check pull request

on:
  # for integration tests
  pull_request:
    branches:
      - master

env:
  IMAGE_NAME: sysblokbot

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: dev

      - name: Python Style Checker
        working-directory: ${{ github.workspace }}
        run: |
          pip3 install --upgrade pip
          export PATH="$HOME/.local/bin:$PATH"
          pip3 install pycodestyle
          pycodestyle . --max-line-length 100
        
      - name: Python Pytest Github Action
        uses: fylein/python-pytest-github-action@v2
        with:
          args: pip3 install -e . && pip3 install -r requirements.txt && pytest tests/unit

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: dev

      - name: Generate build args
        id: args
        run: |
          echo "::set-output name=commit_hash::$(git rev-parse HEAD)"
          echo "::set-output name=commit_hash_short::$(git rev-parse --short HEAD)"

      - name: Publish to Github Packages Registry with cache
        uses: whoan/docker-build-with-cache-action@v5
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          COMMIT_HASH: "${{ steps.args.outputs.commit_hash }}"
          COMMIT_HASH_SHORT: "${{ steps.args.outputs.commit_hash_short }}"
        with:
          image_name: ${{ github.repository }}/${{ env.IMAGE_NAME }}
          registry: docker.pkg.github.com
          username: sysblok
          password: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: Dockerfile
          image_tag: testing
          build_extra_args: "--build-arg=COMMIT_HASH --build-arg=COMMIT_HASH_SHORT"

      - name: Deploy package to digitalocean
        uses: appleboy/ssh-action@master
        env:
          GITHUB_USERNAME: sysblok
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          DO_USERNAME: ${{ secrets.MASTER_DO_USER }}
        with:
          host: ${{ secrets.MASTER_HOST }}
          username: ${{ secrets.MASTER_DO_USER }}
          passphrase: ${{ secrets.MASTER_DO_SSH_KEY_PASSWORD }}
          key: ${{ secrets.MASTER_DO_SSH_KEY }}
          port: ${{ secrets.MASTER_PORT }}
          envs: GITHUB_USERNAME, GITHUB_TOKEN, IMAGE_NAME, DO_USERNAME
          script: |
            docker stop --time=30 $(docker ps -aq --filter name=testing)
            docker rm $(docker ps -aq --filter name=testing)
            docker rmi $(docker images -a --filter reference='docker.pkg.github.com/sysblok/sysblokbot/sysblokbot:testing')
            docker login docker.pkg.github.com -u $GITHUB_USERNAME -p $GITHUB_TOKEN
            touch /home/${{ env.DO_USERNAME }}/sysblokbot.sqlite
            docker run -dit --name sysblokbot-testing \
              --env APP_SOURCE="github CI" \
              -v /home/${{ env.DO_USERNAME }}/config_override_testing.json:/app/config_override.json \
              -v /home/${{ env.DO_USERNAME }}/config_gs_testing.json:/app/config_gs.json \
              -v /home/${{ env.DO_USERNAME }}/sysblokbot.sqlite:/app/sysblokbot.sqlite \
              -v /home/${{ env.DO_USERNAME }}/persistent_storage_testing.pickle:/app/persistent_storage.pickle \
              docker.pkg.github.com/sysblok/sysblokbot/${{ env.IMAGE_NAME }}:testing

  integration_tests:
    needs: push

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: dev

      - name: Integration tests
        uses: fylein/python-pytest-github-action@v2
        env:
          TELEGRAM_APP_ID: ${{ secrets.TELEGRAM_APP_ID }}
          TELEGRAM_APP_HASH: ${{ secrets.TELEGRAM_APP_HASH }}
          TELETHON_SESSION: ${{ secrets.TELETHON_SESSION }}
          TELEGRAM_BOT_NAME: ${{ secrets.TELEGRAM_BOT_NAME }}
          TELEGRAM_ERROR_CHAT_ID: ${{ secrets.TELEGRAM_ERROR_CHAT_ID }}
        with:
          args: pip3 install -e . && pip3 install -r requirements.txt && pytest tests/integration -q | grep 'FAILED' | grep -Po "(?<=\[)[^-]*" | tee errors.txt && python tests/integration/report_test_result.py errors.txt
